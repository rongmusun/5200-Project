# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("/path/to/your/stroke_prediction_dataset.csv")
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a grouped bar plot for Stroke count by Smoking Status and Alcohol Intake
ggplot(stroke_data, aes(x = Smoking_Status, fill = Alcohol_Intake)) +
geom_bar(position = "dodge") +
labs(title = "Count of Stroke Diagnoses by Smoking Status and Alcohol Intake",
x = "Smoking Status",
y = "Count of Stroke Diagnoses",
fill = "Alcohol Intake") +
theme_minimal()
View(data)
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a grouped bar plot for Stroke count by Smoking Status and Alcohol Intake
ggplot(stroke_data, aes(x = `Smoking Status`, fill = `Alcohol Intake`)) +
geom_bar(position = "dodge") +
labs(title = "Count of Stroke Diagnoses by Smoking Status and Alcohol Intake",
x = "Smoking Status",
y = "Count of Stroke Diagnoses",
fill = "Alcohol Intake") +
theme_minimal()
# Display the plot
ggsave("Stroke_Count_by_Smoking_and_Alcohol.png")
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(Smoking_Status, Alcohol_Intake) %>%
summarize(Count = n(), .groups = 'drop')
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Alcohol Intake`) %>%
summarize(Count = n(), .groups = 'drop')
# Create a bubble plot
ggplot(summary_data, aes(x = `Smoking Status`, y = `Alcohol Intake`, size = Count, label = Count)) +
geom_point(alpha = 0.6, color = "blue") +
geom_text(vjust = 1.5, color = "black") +
labs(title = "Bubble Plot of Stroke Diagnoses by Smoking Status and Alcohol Intake",
x = "Smoking Status",
y = "Alcohol Intake",
size = "Count of Stroke Diagnoses") +
theme_minimal() +
theme(legend.position = "right")
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Alcohol Intake`) %>%
summarize(Count = n(), .groups = 'drop')
# Create a bubble plot
ggplot(summary_data, aes(x = `Smoking Status`, y = `Alcohol Intake`, size = Count, label = Count)) +
geom_point(alpha = 0.6, color = "blue") +
geom_text(vjust = 1.5, color = "black") +
labs(title = "Bubble Plot of Stroke Diagnoses by Smoking Status and Alcohol Intake",
x = "Smoking Status",
y = "Alcohol Intake",
size = "Count of Stroke Diagnoses") +
theme(legend.position = "right")
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Alcohol Intake`) %>%
summarize(Count = n(), .groups = 'drop')
# Create a bubble plot
ggplot(summary_data, aes(x = `Smoking Status`, y = `Alcohol Intake`, size = Count, label = Count)) +
geom_point() +
geom_text() +
labs(title = "Bubble Plot of Stroke Diagnoses by Smoking Status and Alcohol Intake",
x = "Smoking Status",
y = "Alcohol Intake",
size = "Count of Stroke Diagnoses") +
theme_minimal() +
theme(legend.position = "right")
# Load the necessary libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Alcohol Intake`) %>%
summarize(Count = n(), .groups = 'drop')
# Create a bubble plot
ggplot(summary_data, aes(x = `Smoking Status`, y = `Alcohol Intake`, size = Count, label = Count)) +
geom_point(alpha = 0.6, color = "orange") +
geom_text(vjust = 1.5) +
labs(title = "Bubble Plot of Stroke Diagnoses by Smoking Status and Alcohol Intake",
x = "Smoking Status",
y = "Alcohol Intake",
size = "Count of Stroke Diagnoses") +
theme_minimal() +
theme(legend.position = "right")
# Load the necessary libraries
library(plotly)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(Smoking_Status, Alcohol_Intake) %>%
summarize(Count = n(), .groups = 'drop')
# Load the necessary libraries
library(plotly)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Alcohol Intake`) %>%
summarize(Count = n(), .groups = 'drop')
# Create an interactive bubble plot using plotly
plot <- plot_ly(summary_data, x = ~`Smoking Status`, y = ~`Alcohol Intake`, size = ~Count, text = ~paste("Count:", Count, "<br>Alcohol Intake:", `Alcohol Intake`, "<br>Smoking Status:", `Smoking Status`), type = 'scatter', mode = 'markers', marker = list(opacity = 0.6, sizemode = 'diameter')) %>%
layout(title = "Interactive Bubble Plot of Stroke Diagnoses by Smoking Status and Alcohol Intake",
xaxis = list(title = "Smoking Status"),
yaxis = list(title = "Alcohol Intake"),
showlegend = FALSE)
# Display the plot
plot
# Load the necessary libraries
library(plotly)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Alcohol Intake`) %>%
summarize(Count = n(), .groups = 'drop')
# Create an interactive bubble plot using plotly
plot <- plot_ly(summary_data, x = ~`Smoking Status`, y = ~`Alcohol Intake`, size = ~Count, text = ~paste("Count:", Count, "<br>Alcohol Intake:", `Alcohol Intake`, "<br>Smoking Status:", `Smoking Status`), type = 'scatter', mode = 'markers', marker = list(color = 'orange', opacity = 0.6, sizemode = 'diameter')) %>%
layout(title = "Interactive Bubble Plot of Stroke Diagnoses by Smoking Status and Alcohol Intake",
xaxis = list(title = "Smoking Status"),
yaxis = list(title = "Alcohol Intake"),
showlegend = FALSE)
# Display the plot
plot
# Load the necessary libraries
library(plotly)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Dietary Habits`) %>%
summarize(Count = n(), .groups = 'drop')
# Create an interactive bubble plot using plotly
plot <- plot_ly(summary_data, x = ~`Smoking Status`, y = ~`Dietary Habits`, size = ~Count,
text = ~paste("Count:", Count, "<br>Dietary Habits:", `Dietary Habits`, "<br>Smoking Status:", `Smoking Status`),
type = 'scatter', mode = 'markers',
marker = list(color = 'orange', opacity = 0.6, sizemode = 'diameter')) %>%
layout(title = "Interactive Bubble Plot of Stroke Diagnoses by Smoking Status and Dietary Habits",
xaxis = list(title = "Smoking Status"),
yaxis = list(title = "Dietary Habits"),
showlegend = FALSE)
# Display the plot
plot
# Load the necessary libraries
library(plotly)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Dietary Habits`) %>%
summarize(Count = n(), .groups = 'drop')
# Adjust the size scale factor for the bubbles to make them smaller
size_factor = 10
# Create an interactive bubble plot using plotly with adjusted size scaling
plot <- plot_ly(summary_data, x = ~`Smoking Status`, y = ~`Dietary Habits`, size = ~Count,
text = ~paste("Count:", Count, "<br>Dietary Habits:", `Dietary Habits`, "<br>Smoking Status:", `Smoking Status`),
type = 'scatter', mode = 'markers',
marker = list(color = 'orange', opacity = 0.6, sizemode = 'diameter', size = ~Count/size_factor)) %>%
layout(title = "Interactive Bubble Plot of Stroke Diagnoses by Smoking Status and Dietary Habits",
xaxis = list(title = "Smoking Status"),
yaxis = list(title = "Dietary Habits"),
showlegend = FALSE,
autosize = TRUE,
width = 1000,  # Width of the plot
height = 600   # Height of the plot
)
# Display the plot
plot
# Load the necessary libraries
library(plotly)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Dietary Habits`) %>%
summarize(Count = n(), .groups = 'drop')
# Create an interactive bubble plot using plotly
plot <- plot_ly(summary_data, x = ~`Smoking Status`, y = ~`Dietary Habits`, size = ~Count,
text = ~paste("Count:", Count, "<br>Dietary Habits:", `Dietary Habits`, "<br>Smoking Status:", `Smoking Status`),
type = 'scatter', mode = 'markers',
marker = list(color = 'orange', opacity = 0.6, sizemode = 'diameter')) %>%
layout(title = "Interactive Bubble Plot of Stroke Diagnoses by Smoking Status and Dietary Habits",
xaxis = list(title = "Smoking Status"),
yaxis = list(title = "Dietary Habits"),
showlegend = FALSE)
# Display the plot
plot
# Load the necessary libraries
library(plotly)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Dietary Habits`) %>%
summarize(Count = n(), .groups = 'drop')
# Create an interactive bubble plot using plotly with switched axes
plot <- plot_ly(summary_data, x = ~`Dietary Habits`, y = ~`Smoking Status`, size = ~Count,
text = ~paste("Count:", Count, "<br>Dietary Habits:", `Dietary Habits`, "<br>Smoking Status:", `Smoking Status`),
type = 'scatter', mode = 'markers',
marker = list(color = 'orange', opacity = 0.6, sizemode = 'diameter')) %>%
layout(title = "Interactive Bubble Plot of Stroke Diagnoses by Dietary Habits and Smoking Status",
xaxis = list(title = "Dietary Habits"),
yaxis = list(title = "Smoking Status"),
showlegend = FALSE)
# Display the plot
plot
# Load the necessary libraries
library(plotly)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Calculate total counts for each Smoking Status and Dietary Habits for labels
total_counts <- summary_data %>%
group_by(`Smoking Status`) %>%
summarize(Total_Smoking_Status = sum(Count), .groups = 'drop') %>%
right_join(summary_data, by = "Smoking Status") %>%
group_by(`Dietary Habits`) %>%
summarize(Total_Dietary_Habits = sum(Count), .groups = 'drop') %>%
right_join(summary_data, by = "Dietary Habits")
# Add total count data to the summary dataframe
summary_data <- summary_data %>%
left_join(total_counts, by = c("Smoking Status", "Dietary Habits"))
# Create an interactive bubble plot using plotly with total counts
plot <- plot_ly(summary_data, x = ~`Dietary Habits`, y = ~`Smoking Status`, size = ~Count,
text = ~paste("Count:", Count, "<br>Dietary Habits:", `Dietary Habits`,
"<br>Smoking Status:", `Smoking Status`,
"<br>Total Count (Smoking Status):", Total_Smoking_Status,
"<br>Total Count (Dietary Habits):", Total_Dietary_Habits),
type = 'scatter', mode = 'markers',
marker = list(color = 'orange', opacity = 0.6, sizemode = 'diameter')) %>%
layout(title = "Interactive Bubble Plot of Stroke Diagnoses by Dietary Habits and Smoking Status",
xaxis = list(title = "Dietary Habits"),
yaxis = list(title = "Smoking Status"),
showlegend = FALSE)
# Display the plot
plot
# Load the necessary libraries
library(plotly)
library(dplyr)
library(readr)
# Load your dataset
data <- read_csv("./data/stroke_prediction_dataset.csv")
# Filter data to include only 'Stroke' diagnoses
stroke_data <- data %>%
filter(Diagnosis == "Stroke")
# Create a summary data frame for count of stroke diagnoses grouped by Smoking Status and Dietary Habits
summary_data <- stroke_data %>%
group_by(`Smoking Status`, `Dietary Habits`) %>%
summarize(Count = n(), .groups = 'drop')
# Calculate total counts for each Smoking Status and Dietary Habits
total_counts_smoking <- summary_data %>%
group_by(`Smoking Status`) %>%
summarize(Total_Smoking_Status = sum(Count), .groups = 'drop')
total_counts_dietary <- summary_data %>%
group_by(`Dietary Habits`) %>%
summarize(Total_Dietary_Habits = sum(Count), .groups = 'drop')
# Merge total counts back to summary_data
summary_data <- summary_data %>%
left_join(total_counts_smoking, by = "Smoking Status") %>%
left_join(total_counts_dietary, by = "Dietary Habits")
# Create an interactive bubble plot using plotly with total counts
plot <- plot_ly(summary_data, x = ~`Dietary Habits`, y = ~`Smoking Status`, size = ~Count,
text = ~paste("Count:", Count, "<br>Dietary Habits:", `Dietary Habits`,
"<br>Smoking Status:", `Smoking Status`,
"<br>Total Count (Smoking Status):", Total_Smoking_Status,
"<br>Total Count (Dietary Habits):", Total_Dietary_Habits),
type = 'scatter', mode = 'markers',
marker = list(color = 'orange', opacity = 0.6, sizemode = 'diameter')) %>%
layout(title = "Interactive Bubble Plot of Stroke Diagnoses by Dietary Habits and Smoking Status",
xaxis = list(title = "Dietary Habits"),
yaxis = list(title = "Smoking Status"),
showlegend = FALSE)
# Display the plot
plot
# Load necessary libraries
library(dplyr)
library(readr)
library(caret)  # For data preprocessing
library(nnet)   # For multinom function in logistic regression
# Remove unnecessary columns
data <- select(data, -c(`Patient ID`, `Patient Name`))
# Convert Diagnosis to a binary factor (0 = No Stroke, 1 = Stroke)
data$Diagnosis <- ifelse(data$Diagnosis == "Stroke", 1, 0)
# Convert all categorical variables to factors
categorical_vars <- sapply(data, is.character)
data[categorical_vars] <- lapply(data[categorical_vars], as.factor)
# One-hot encoding for categorical variables using caret package
dummies <- dummyVars(" ~ .", data = data)
data <- predict(dummies, newdata = data)
# Split the data into training and testing sets
set.seed(123)  # for reproducibility
training_samples <- createDataPartition(data$Diagnosis, p = 0.8, list = FALSE)
View(data)
